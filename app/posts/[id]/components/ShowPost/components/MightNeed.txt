'use client'

import { ReactNode, useState, useCallback, useEffect } from 'react'
import ContentSection from './ContentSection'
import CommentsSection from './CommentsSection'
import ResizableDivider from './ResizableDivider'

interface SideBySideLayoutProps {
  content: ReactNode
  comments: ReactNode
  initialContentWidth?: number
}

const SideBySideLayout = ({
  content,
  comments,
  initialContentWidth = 60
}: SideBySideLayoutProps) => {
  const [contentWidth, setContentWidth] = useState(initialContentWidth)
  const [isDragging, setIsDragging] = useState(false)

  const handleMouseDown = useCallback(() => {
    setIsDragging(true)
  }, [])

  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!isDragging) return

    const container = document.getElementById('side-by-side-container')
    if (!container) return

    const containerRect = container.getBoundingClientRect()
    const newContentWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100

    if (newContentWidth >= 20 && newContentWidth <= 80) {
      setContentWidth(newContentWidth)
    }
  }, [isDragging])

  const handleMouseUp = useCallback(() => {
    setIsDragging(false)
  }, [])

  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove)
      document.addEventListener('mouseup', handleMouseUp)
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
    }
  }, [isDragging, handleMouseMove, handleMouseUp])

  return (
    <div
      id="side-by-side-container"
      className="flex h-full w-full relative"
    >
      <div style={{ width: `${contentWidth}%` }}>
        <ContentSection>{content}</ContentSection>
      </div>
      <ResizableDivider onDrag={handleMouseDown} />
      <div style={{ width: `${100 - contentWidth}%` }}>
        <CommentsSection>{comments}</CommentsSection>
      </div>
    </div>
  )
}

export default SideBySideLayout 