import { getClientIP } from "@/app/Auth/Functions/GetIp";
import VerifyToken from "@/app/Auth/Functions/VerifyToken";
import { DecryptCombine } from "@/app/Auth/Lock/Combine";
import { encrypt } from "@/app/Auth/Lock/Enc";
import db from "@/lib/Database/Supabase/Base";
import { cookies, headers } from "next/headers";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
    try {
        let c = await cookies()
        let h = await headers()
        let userAgent = h.get('user-agent')?.split(/\s+/).join('')
        let ip = await getClientIP(h)
        // 

        const auth = c.get('chat_private_token')?.value;
        if (!auth) {
          return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }
    
        const verifyAuth = await VerifyToken(auth, [c.get('id')?.value, ip, `${process.env.ADMIN_LOGIN}`]);
        if (!verifyAuth) {
          return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
        }

        if(!db){
            return NextResponse.json({ error: `Oups Something went wrong..` }, { status: 500 });
        }

        const { data: chatUser, error: userError } = await db
        .from('chat_users')
        .select('*')
        .eq('user_id', c.get('id')?.value)
        .eq('user_ua', userAgent)
        .maybeSingle()
    
        if(userError){
          return NextResponse.json({ error: `You're not authorized to make this request` }, { status: 401 });
        }
    
        if(!chatUser){
          return NextResponse.json({ error: `You're not authorized to make this request` }, { status: 401 });
        }

        const { searchParams } = new URL(request.url);
        let id = searchParams.get('id')
        let length = searchParams.get('length')
        const value = searchParams.values().next().value;

        if (!value?.trim() || !length || !id) {
            return new NextResponse('No value provided', { status: 400 })
        }

        let psh: any[] = []

        for(let i = 0; i < parseInt(length); i++){
            
            let url = `https://raw.githubusercontent.com/${process.env.GITHUB_OWNER}/${id}/main/${value}_${i}`
            let fetch_github = await fetch(url)
    
            if(!fetch_github.ok){
                return new NextResponse('File not found', { status: 404 })
            }
            
            let file = await fetch_github.arrayBuffer()
            psh.push(new Uint8Array(file))
        }
        
        try {
            // Combine all chunks into a single Uint8Array
            const totalLength = psh.reduce((acc, chunk) => acc + chunk.length, 0);
            const combinedArray = new Uint8Array(totalLength);
            let offset = 0;
            
            for (const chunk of psh) {
                combinedArray.set(chunk, offset);
                offset += chunk.length;
            }
            
            // Convert to Blob and return
            const blob = new Blob([combinedArray]);
            return new NextResponse(blob, {
                headers: {
                    'Content-Type': 'application/octet-stream',
                    'Content-Disposition': `attachment; filename="${value}"`
                }
            });
           
        } catch (decodeError) {
            console.error('Error decoding base64 content:', decodeError);
            return new NextResponse('Invalid file content', { status: 400 });
        }
    } catch (error) {
        console.error('Error processing file:', error);
        return new NextResponse('Internal Server Error', { status: 500 });
    }
}